From 6a3036c26ebc02101ec914a59d94cbafb223b04d Mon Sep 17 00:00:00 2001
From: Marco Cantoro <marco.cantoro92@outlook.it>
Date: Tue, 6 Jul 2021 07:07:54 +0200
Subject: [PATCH] git_name_patches

---
 Makefile                        |   2 +-
 patches/gitstatus/mainline.diff | 294 ++++++++++++++++++++++++++------
 2 files changed, 242 insertions(+), 54 deletions(-)

diff --git a/Makefile b/Makefile
index 4423373..cb66c67 100644
--- a/Makefile
+++ b/Makefile
@@ -28,7 +28,7 @@ O_NOUG := 0  # disable user, group name in status bar
 O_NOX11 := 0  # disable X11 integration
 
 # User patches
-O_GITSTATUS := 0 # add git status to detail view
+O_GITSTATUS := 1 # add git status to detail view
 O_NAMEFIRST := 0 # print file name first, add uid and guid to detail view
 
 ifeq ($(strip $(O_GITSTATUS)),1)
diff --git a/patches/gitstatus/mainline.diff b/patches/gitstatus/mainline.diff
index f574dc5..8e5bf87 100644
--- a/patches/gitstatus/mainline.diff
+++ b/patches/gitstatus/mainline.diff
@@ -1,44 +1,48 @@
-# Description: Add git status column to detail mode. Provides additional
-#              command line flag -G which will render the git status
-#              column also in normal mode. nnn.vim users may consider
-#              adding `let g:nnn#command = 'nnn -G' to their vim config.
-#
-# Dependencies: libgit2
-#
-# Authors: @crides, Luuk van Baal
+From 53299cc4c75c601482f6ed69a868b7091db3a7f5 Mon Sep 17 00:00:00 2001
+From: Marco Cantoro <marco.cantoro92@outlook.it>
+Date: Tue, 6 Jul 2021 07:03:20 +0200
+Subject: [PATCH] patches fixes
+
+---
+ src/nnn.c | 223 +++++++++++++++++++++++++++++++++++++++++-------------
+ 1 file changed, 170 insertions(+), 53 deletions(-)
 
 diff --git a/src/nnn.c b/src/nnn.c
-index 67523fe6..c965bd1c 100644
+index 358ba27..8977e00 100644
 --- a/src/nnn.c
 +++ b/src/nnn.c
-@@ -105,6 +105,7 @@
+@@ -107,6 +107,7 @@
  #include <wchar.h>
  #include <pwd.h>
  #include <grp.h>
 +#include <git2.h>
-
+ 
  #if !defined(alloca) && defined(__GNUC__)
  /*
-@@ -265,6 +266,7 @@ typedef struct entry {
+@@ -269,6 +270,7 @@ typedef struct entry {
  	uid_t uid; /* 4 bytes */
  	gid_t gid; /* 4 bytes */
  #endif
 +	git_status_t git_status;
  } *pEntry;
-
+ 
  /* Key-value pairs from env */
-@@ -315,6 +317,7 @@ typedef struct {
+@@ -319,6 +321,7 @@ typedef struct {
  	uint_t cliopener  : 1;  /* All-CLI app opener */
  	uint_t waitedit   : 1;  /* For ops that can't be detached, used EDITOR */
  	uint_t rollover   : 1;  /* Roll over at edges */
 +	uint_t normalgit  : 1;  /* Show git status in normal mode */
  } settings;
-
- /* Non-persistent program-internal states */
-@@ -363,7 +366,19 @@ typedef struct {
+ 
+ /* Non-persistent program-internal states (alphabeical order) */
+@@ -368,7 +371,23 @@ typedef struct {
  } session_header_t;
  #endif
-
+ 
++static struct {
++	ushort_t maxnameln, maxsizeln, maxuidln, maxgidln, maxentln, uidln, gidln, printguid;
++} dtls;
++
 +typedef struct {
 +	char *path;
 +	git_status_t status;
@@ -52,21 +56,47 @@ index 67523fe6..c965bd1c 100644
 +
  /* GLOBALS */
 +simple_git_statuses_t git_statuses;
-
+ 
  /* Configuration, contexts */
  static settings cfg = {
-@@ -394,6 +409,7 @@ static settings cfg = {
+@@ -399,6 +418,7 @@ static settings cfg = {
  	0, /* cliopener */
  	0, /* waitedit */
  	1, /* rollover */
 +	0, /* normalgit */
  };
-
+ 
  static context g_ctx[CTX_MAX] __attribute__ ((aligned));
-@@ -3498,6 +3514,66 @@ static char *get_kv_val(kv *kvarr, char *buf, int key, uchar_t max, uchar_t id)
+@@ -1052,10 +1072,12 @@ static char *getpwname(uid_t uid)
+ 	static char *namecache;
+ 
+ 	if (uidcache != uid) {
++		if (dtls.maxuidln && !dtls.printguid) dtls.printguid = 1;
+ 		struct passwd *pw = getpwuid(uid);
+ 
+ 		uidcache = uid;
+ 		namecache = pw ? pw->pw_name : NULL;
++		dtls.uidln = xstrlen(namecache ? namecache : xitoa(uid));
+ 	}
+ 
+ 	return namecache ? namecache : xitoa(uid);
+@@ -1067,10 +1089,12 @@ static char *getgrname(gid_t gid)
+ 	static char *grpcache;
+ 
+ 	if (gidcache != gid) {
++		if (dtls.maxgidln && !dtls.printguid) dtls.printguid = 1;
+ 		struct group *gr = getgrgid(gid);
+ 
+ 		gidcache = gid;
+ 		grpcache = gr ? gr->gr_name : NULL;
++		dtls.gidln = xstrlen(grpcache ? grpcache : xitoa(gid));
+ 	}
+ 
+ 	return grpcache ? grpcache : xitoa(gid);
+@@ -3506,6 +3530,66 @@ static char *get_kv_val(kv *kvarr, char *buf, int key, uchar_t max, uchar_t id)
  	return NULL;
  }
-
+ 
 +static void print_gitstatus(git_status_t status) {
 +	if (status & GIT_STATUS_INDEX_NEW)             addch('N' | (g_state.oldcolor ? COLOR_PAIR(1) : COLOR_PAIR(C_EXE)));
 +	else if (status & GIT_STATUS_INDEX_MODIFIED)   addch('M' | (g_state.oldcolor ? COLOR_PAIR(1) : COLOR_PAIR(4)));
@@ -130,23 +160,123 @@ index 67523fe6..c965bd1c 100644
  static void resetdircolor(int flags)
  {
  	/* Directories are always shown on top, clear the color when moving to first file */
-@@ -3835,6 +3911,12 @@ static void printent(const struct entry *ent, uint_t namecols, bool sel)
-
+@@ -3521,14 +3605,13 @@ static void resetdircolor(int flags)
+  * Max supported str length: NAME_MAX;
+  */
+ #ifdef NOLC
+-static char *unescape(const char *str, uint_t maxcols)
++static size_t unescape(const char *str, uint_t maxcols)
+ {
+ 	char * const wbuf = g_buf;
+ 	char *buf = wbuf;
+-
+-	xstrsncpy(wbuf, str, maxcols);
++	size_t len = xstrsncpy(wbuf, str, maxcols);
+ #else
+-static wchar_t *unescape(const char *str, uint_t maxcols)
++static size_t unescape(const char *str, uint_t maxcols)
+ {
+ 	wchar_t * const wbuf = (wchar_t *)g_buf;
+ 	wchar_t *buf = wbuf;
+@@ -3553,7 +3636,7 @@ static wchar_t *unescape(const char *str, uint_t maxcols)
+ 		++buf;
+ 	}
+ 
+-	return wbuf;
++	return len;
+ }
+ 
+ static off_t get_size(off_t size, off_t *pval, int comp)
+@@ -3814,35 +3897,14 @@ static uchar_t get_color_pair_name_ind(const struct entry *ent, char *pind, int
+ static void printent(const struct entry *ent, uint_t namecols, bool sel)
+ {
+ 	char ind = '\0';
+-	int attrs;
+-
+-	if (cfg.showdetail) {
+-		int type = ent->mode & S_IFMT;
+-		char perms[6] = {' ', ' ', (char)('0' + ((ent->mode >> 6) & 7)),
+-				(char)('0' + ((ent->mode >> 3) & 7)),
+-				(char)('0' + (ent->mode & 7)), '\0'};
+-
+-		addch(' ');
+-		attrs = g_state.oldcolor ? (resetdircolor(ent->flags), A_DIM)
+-					 : (fcolors[C_MIS] ? COLOR_PAIR(C_MIS) : 0);
+-		if (attrs)
+-			attron(attrs);
+-
+-		/* Print details */
+-		print_time(&ent->sec);
+-
+-		printw("%s%9s ", perms, (type == S_IFREG || type == S_IFDIR)
+-			? coolsize(cfg.blkorder ? (blkcnt_t)ent->blocks << blk_shift : ent->size)
+-			: (type = (uchar_t)get_detail_ind(ent->mode), (char *)&type));
+-
+-		if (attrs)
+-			attroff(attrs);
+-	}
+-
+-	attrs = 0;
+-
++	int attrs = 0, namelen;
  	uchar_t color_pair = get_color_pair_name_ind(ent, &ind, &attrs);
-
+ 
 +	if (git_statuses.show && (cfg.showdetail || cfg.normalgit)) {
-+		if (cfg.normalgit && !cfg.showdetail)
-+			addch(' ');
++		addch(' ');
 +		print_gitstatus(ent->git_status);
 +	}
 +
- 	addch((ent->flags & FILE_SELECTED) ? '+' | A_REVERSE | A_BOLD : ' ');
-
+ 	addch((ent->flags & FILE_SELECTED) ? '+' | A_BOLD : ' ');
+ 
  	if (g_state.oldcolor)
-@@ -5160,6 +5242,10 @@ static int dentfill(char *path, struct entry **ppdents)
+@@ -3865,15 +3927,40 @@ static void printent(const struct entry *ent, uint_t namecols, bool sel)
+ 		++namecols;
+ 
+ #ifndef NOLC
+-	addwstr(unescape(ent->name, namecols));
++	addwstr((namelen = unescape(ent->name, namecols), (wchar_t *)g_buf));
+ #else
+-	addstr(unescape(ent->name, MIN(namecols, ent->nlen) + 1));
++	addstr((namelen = unescape(ent->name, MIN(namecols, ent->nlen) + 1), (char *)g_buf));
+ #endif
+ 
+-	if (attrs)
++	if (!sel && attrs)
+ 		attroff(attrs);
+ 	if (ind)
+ 		addch(ind);
++	if (cfg.showdetail) {
++		int type = ent->mode & S_IFMT;
++		char perms[6] = {(char)('0' + ((ent->mode >> 6) & 7)),
++				(char)('0' + ((ent->mode >> 3) & 7)),
++				(char)('0' + (ent->mode & 7)), ' ', ' ', '\0'}, *size = NULL;
++
++		if (attrs)
++			attron(attrs);
++		if (!g_state.oldcolor && (type == S_IFDIR || (type == S_IFLNK && ent->flags & DIR_OR_DIRLNK)))
++			attroff(A_BOLD);
++		size_t sizelen = (type == S_IFREG || type == S_IFDIR) ? xstrlen(size = coolsize(cfg.blkorder ? ent->blocks << blk_shift : ent->size)) : 1;
++		printw("%*c%*s%s%s", 1 + MIN(namecols, dtls.maxnameln + (size_t)(ind ? 0 : 1)) - namelen, ' ',
++				dtls.maxsizeln - sizelen, "", size ? size : (type = (uchar_t)get_detail_ind(ent->mode), (char *)&type), "  ");
++#ifndef NOUG
++		if (g_state.uidgid && dtls.printguid) {
++			addstr(getpwname(ent->uid));
++			printw("%*c%s", dtls.maxuidln + 1 - dtls.uidln, ' ', getgrname(ent->gid));
++			printw("%*c", dtls.maxgidln + 2 - dtls.gidln, ' ');
++		}
++#endif
++		addstr(perms);
++		print_time(&ent->sec);
++	}
++	if (attrs)
++		attroff(attrs);
+ }
+ 
+ static void savecurctx(char *path, char *curname, int nextctx)
+@@ -5177,6 +5264,10 @@ static int dentfill(char *path, struct entry **ppdents)
  		attron(COLOR_PAIR(cfg.curctx + 1));
  	}
-
+ 
 +	if (git_statuses.len)
 +		git_statuses_free();
 +	git_statuses = statuses_from_path(path);
@@ -154,10 +284,10 @@ index 67523fe6..c965bd1c 100644
  #if _POSIX_C_SOURCE >= 200112L
  	posix_fadvise(fd, 0, 0, POSIX_FADV_SEQUENTIAL);
  #endif
-@@ -5357,6 +5443,23 @@ static int dentfill(char *path, struct entry **ppdents)
+@@ -5375,6 +5466,23 @@ static int dentfill(char *path, struct entry **ppdents)
  #endif
  		}
-
+ 
 +		if (git_statuses.len) {
 +			char *dentpath = abspath(dentp->name, path);
 +			namebuflen = xstrlen(dentpath);
@@ -177,36 +307,91 @@ index 67523fe6..c965bd1c 100644
 +
  		++ndents;
  	} while ((dp = readdir(dirp)));
-
-@@ -5873,16 +5976,16 @@ static int adjust_cols(int n)
+ 
+@@ -5871,14 +5979,6 @@ static void statusbar(char *path)
+ 		tocursor();
+ }
+ 
+-static inline void markhovered(void)
+-{
+-	if (cfg.showdetail && ndents) { /* Reversed block for hovered entry */
+-		tocursor();
+-		addch('>' | A_BOLD);
+-	}
+-}
+-
+ static int adjust_cols(int n)
+ {
+ 	/* Calculate the number of cols available to print entry name */
+@@ -5886,15 +5986,14 @@ static int adjust_cols(int n)
+ 	n -= (g_state.oldcolor ? 0 : 1 + xstrlen(ICON_PADDING_LEFT) + xstrlen(ICON_PADDING_RIGHT));
  #endif
  	if (cfg.showdetail) {
- 		/* Fallback to light mode if less than 35 columns */
+-		/* Fallback to light mode if less than 35 columns */
 -		if (n < 36)
-+		if (n < 38)
++		if (n < (dtls.maxentln + 1 - dtls.maxnameln))
  			cfg.showdetail ^= 1;
- 		else {
- 			/* 2 more accounted for below */
+-		else /* 2 more accounted for below */
 -			n -= 32;
-+			n -= (git_statuses.show ? 34 : 32);
- 		}
++		else
++			n -= (dtls.maxentln - 2 - dtls.maxnameln);
  	}
-
+ 
  	/* 2 columns for preceding space and indicator */
 -	return (n - 2);
 +	return (n - ((git_statuses.show && (cfg.normalgit && !cfg.showdetail)) ? 5 : 2));
  }
-
+ 
  static void draw_line(char *path, int ncols)
-@@ -7608,6 +7711,7 @@ static void usage(void)
- 		" -f      use readline history file\n"
+@@ -5928,8 +6027,6 @@ static void draw_line(char *path, int ncols)
+ 	if (dir)
+ 		attroff(COLOR_PAIR(cfg.curctx + 1) | A_BOLD);
+ 
+-	markhovered();
+-
+ 	statusbar(path);
+ }
+ 
+@@ -6038,6 +6135,21 @@ static void redraw(char *path)
+ 
+ 	onscreen = MIN(onscreen + curscroll, ndents);
+ 
++	if (cfg.showdetail) {
++		ushort_t lenbuf = dtls.maxnameln = dtls.maxsizeln = dtls.maxuidln = dtls.maxgidln = dtls.printguid = 0;
++		for (i = curscroll; i < onscreen; ++i) {
++			if ((lenbuf = pdents[i].nlen - 1) > dtls.maxnameln) dtls.maxnameln = lenbuf;
++			if ((lenbuf = xstrlen(coolsize(cfg.blkorder ? pdents[i].blocks << blk_shift : pdents[i].size))) > dtls.maxsizeln) dtls.maxsizeln = lenbuf;
++#ifndef NOUG
++			if (g_state.uidgid) {
++				if ((getpwname(pdents[i].uid), dtls.uidln) > dtls.maxuidln) dtls.maxuidln = dtls.uidln;
++				if ((getgrname(pdents[i].gid), dtls.gidln) > dtls.maxgidln) dtls.maxgidln = dtls.gidln;
++			}
++#endif
++		}
++		dtls.maxentln = dtls.maxnameln + dtls.maxsizeln + (dtls.printguid ? (dtls.maxuidln + dtls.maxgidln) : 0) + (git_statuses.show ? 3 : 0) + (g_state.uidgid ? 26 : 23);
++	}
++
+ 	ncols = adjust_cols(ncols);
+ 
+ 	/* Print listing */
+@@ -6062,8 +6174,6 @@ static void redraw(char *path)
+ #endif
+ 	}
+ 
+-	markhovered();
+-
+ 	statusbar(path);
+ }
+ 
+@@ -7638,6 +7748,7 @@ static void usage(void)
+ 		" -F val  fifo mode [0:preview 1:explore]\n"
  #endif
  		" -g      regex filters\n"
 +		" -G      always show git status\n"
  		" -H      show hidden files\n"
  		" -J      no auto-proceed on select\n"
  		" -K      detect key collision\n"
-@@ -7746,6 +7850,8 @@ static void cleanup(void)
+@@ -7776,6 +7887,8 @@ static void cleanup(void)
  		fflush(stdout);
  	}
  #endif
@@ -215,8 +400,8 @@ index 67523fe6..c965bd1c 100644
  	free(selpath);
  	free(plgpath);
  	free(cfgpath);
-@@ -7790,7 +7896,7 @@ int main(int argc, char *argv[])
-
+@@ -7819,7 +7932,7 @@ int main(int argc, char *argv[])
+ 
  	while ((opt = (env_opts_id > 0
  		       ? env_opts[--env_opts_id]
 -		       : getopt(argc, argv, "aAb:cCdDeEfF:gHJKl:nop:P:QrRs:St:T:uUVwxh"))) != -1) {
@@ -224,7 +409,7 @@ index 67523fe6..c965bd1c 100644
  		switch (opt) {
  #ifndef NOFIFO
  		case 'a':
-@@ -7831,6 +7937,9 @@ int main(int argc, char *argv[])
+@@ -7870,6 +7983,9 @@ int main(int argc, char *argv[])
  			cfg.regex = 1;
  			filterfn = &visible_re;
  			break;
@@ -234,11 +419,14 @@ index 67523fe6..c965bd1c 100644
  		case 'H':
  			cfg.showhidden = 1;
  			break;
-@@ -7938,6 +8047,7 @@ int main(int argc, char *argv[])
+@@ -7977,6 +8093,7 @@ int main(int argc, char *argv[])
  		return EXIT_FAILURE;
-
+ 
  	atexit(cleanup);
 +	git_libgit2_init();
-
+ 
  	/* Check if we are in path list mode */
  	if (!isatty(STDIN_FILENO)) {
+-- 
+2.32.0
+
-- 
2.32.0

