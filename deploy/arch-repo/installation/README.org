#+TITLE: ArchLinux installation in a NutShell
#+AUTHOR: Marco Cantoro
#+EMAIL: marco.cantoro92@outlook.it
#+STARTUP: overview
#+OPTIONS: toc:2 num:3

* Phase I: Installation
** disk partitioning
Partition the disk with =cfdisk=

** Connect to the internet
#+begin_src shell
  iwctl
  station wlan0 connect ...
#+end_src

** Update the system clock
#+begin_src shell
  timedatectl set-ntp true
  timedatectl status
#+end_src

** Format the partitions
#+begin_src shell
  mkfs.btrfs -L rootName /dev/<root>
  mkswap -L swap /dev/<swap>
#+end_src

** Mount the filesystem

*** Mount the btrfs partition
#+begin_src shell
  mount /dev/<root> /mnt
#+end_src

*** Create Subvolumes
#+begin_src shell
  btrfs subvolume create /mnt/@
  btrfs subvolume create /mnt/@home
  btrfs subvolume create /mnt/@log
  btrfs subvolume create /mnt/@pkg
  btrfs subvolume create /mnt/@tmp
  btrfs subvolume create /mnt/@snapshots
  umount /mnt
#+end_src

*** Mount the subvolumes in their respective directories
#+begin_src shell
  mount -o noatime,compress=zstd,space_cache=v2,autodefrag,subvol=@ /dev/sda1 /mnt
  mkdir -p /mnt/{home,var/{log,cache/pacman/pkg,tmp},.snapshots}
  mount -o noatime,compress=zstd,space_cache=v2,autodefrag,subvol=@home /dev/sda1 /mnt/home
  mount -o noatime,compress=zstd,space_cache=v2,autodefrag,subvol=@log /dev/sda1 /mnt/var/log
  mount -o noatime,compress=zstd,space_cache=v2,autodefrag,subvol=@pkg /dev/sda1 /mnt/var/cache/pacman/pkg
  mount -o noatime,compress=zstd,space_cache=v2,autodefrag,subvol=@tmp /dev/sda1 /mnt/var/tmp
  mount -o noatime,compress=zstd,space_cache=v2,autodefrag,subvol=@snapshots /dev/sda1 /mnt/.snapshots
#+end_src

*** enable the swap volume
#+begin_src shell
  swapon /dev/<swap>
#+end_src

** Install essential packages
#+begin_src shell
  pacstrap /mnt base base-devel linux-zen linux-firmware vi git zsh
#+end_src

* Phase II: Configuring the system

** Fstab
#+begin_src shell
  genfstab -U /mnt >> /mnt/etc/fstab
#+end_src

** Chroot in the installed arch linux
#+begin_src shell
  arch-chroot /mnt
#+end_src

** Timezone
Set the time zone and run hwclock to generate /etc/adjtime
#+begin_src shell
  ln -sf /usr/share/zoneinfo/Europe/Rome /etc/localtime
  hwclock --systohc
#+end_src

** Localization
Edit /etc/locale.gen and uncommented needed locales
(en_US.UTF-8 UTF-8 and it_IT.UTF-8 UTF-8). And the generate locales by
#+begin_src shell
  locale-gen
#+end_src

Create =/etc/locale.conf= and =/etc/vconsole.conf=

** Network configuration

*** Hostname
Create the hostname file =/etc/hostname= containing the host name.
Add matching entries to =/etc/hosts=
#+begin_src config
  127.0.0.1    localhost
  ::1          localhost
  127.0.1.1    HOSTNAME.localdomain    HOSTNAME
#+end_src

*** Install remaining packages
They contain also network management softwares, grub ...
Look at =./packages/*=

** Root password with =passwd=

** Boot loader

*** Add the =btrfs= module to mkinitcpio
/etc/mkinitcpio.conf -> MODULES=(btrfs)
and then recreate the initial ram disk =mkinitcpio -P=

*** Install a boot loader (grub)
#+begin_src shell
  grub-install --target=i386-pc /dev/<device>
  grub-mkconfig -o /boot/grub/grub.cfg
#+end_src

** Exit and Reboot

* Phase III: Installing X and Deploy dotfiles

** Add user and add it to important groups
#+begin_src shell
  useradd -m -G video,log,adm,lp,power,network,users,sys,wheel,rfkill -s /bin/zsh USERNAME
  passwd USERNAME
#+end_src

I used to also add those: audio,floppy,scanner,optical,storage,?

Edit /etc/sudoers with =EDITOR=vi visudo= and uncomment wheel.. to allow
user of the weel group to execute sudo.

** Log in with the create user
** Network
*** Activate network services
#+begin_src shell
  systemctl enable --now systemd-networkd
  systemctl enable --now systemd-resolved
  systemctl enable --now NetworkManager
#+end_src

*** Wifi
#+begin_src shell
  nmtui
#+end_src

** Package-Management

*** Retrieve the latest Pacman mirrorlist
   #+begin_src sh
     sudo reflector --protocol http,https --fastest 5 --latest 100 --age 24 --country Italy,France,German,Spain,Switzerland --save /etc/pacman.d/mirrorlist
   #+end_src

*** Man database
Initizialise index database caches.
#+begin_src shell
  sudo mandb
#+end_src

*** Pacman files database
#+begin_src shell
  sudo pacman -Fy
#+end_src
to use with =command_not_found_handler=

*** Pacman pkgs
*** Aur pkgs
#+begin_src sh
  auracle clone $(< ~/dotfiles/deploy/arch-repo/aur-packages.txt)
#+end_src

*** More pkgs

**** Haskell and XMonad

***** Setup stack and install cabal-install
#+begin_src sh
  stack setup --system-ghc
  stack install --system-ghc cabal-install

  cabal update
  cabal install cabal-uninstall
#+end_src
=ghc-pkg list= to check if you have installed only statically linked Haskell packages.
Now you re ready to go!

***** XMonad and XMobar
After the first compilation of the two cabal projects.
#+begin_src sh
ln -sv $XMONAD_CONFIG_DIR/xmonad-x86_64-linux ~/.local/bin
#+end_src

***** Pandoc
#+begin_src sh
  cabal install pandoc
#+end_src

***** Utilitites
#+begin_src sh
  cabal install hlint
  cabal install hoogle
  cabal install brittany
#+end_src

**** Go

***** Bibtex-ls
#+begin_src sh
  go get github.com/msprev/fzf-bibtex/cmd/bibtex-ls
  go install github.com/msprev/fzf-bibtex/cmd/bibtex-ls
  go install github.com/msprev/fzf-bibtex/cmd/bibtex-markdown
  go install github.com/msprev/fzf-bibtex/cmd/bibtex-cite
#+end_src

**** Python
#+begin_src shell
  pip install neovim-remote
#+end_src

**** Ruby
#+begin_src sh
  gem install neovim solargraph
#+end_src

**** Node
#+begin_src shell
  npm install -g neovim
  npm install -g vim-language-server
  #npm install -g vscode-html-languageserver-bin
  #npm install -g vscode-css-languageserver-bin
  #npm install -g typescript typescript-language-server
  # maybe typescript via `pacman` ??
#+end_src

**** Perl
#+begin_src sh
  cpan Perl::LanguageServer
  # cpan Neovim::Ext # not working
#+end_src

*** Btrfs Utilitites
pacman: snapper grub-btrfs snap-pac
aur: snap-pac-grub snapper-gui-git

**** Snapper configuration
Create the config
#+begin_src shell
  umount /.snapshots
  rm -rf /.snapshots/ #Little trickle
  snapper -c root create-config /
  mount -a
#+end_src

Edit the config =/etc/snapper/configs/root=
ALLOW_USER="cantoro"
and adjust cleanup timeline --> daily 7 and hourly 5 .. others 0

Change permissions to the snapshots directory
#+begin_src shell
  chmod a+rx /.snapshots
  chown :users /.snapshots
#+end_src

Enable systemd services for snapper
#+begin_src shell
  systemctl enable --now snapper-timeline.timer
  systemctl enable --now snapper-cleanup.timer
#+end_src

** Systemd services
*** Reflector services
#+begin_src sh
  systemctl enable --now reflector.service
  systemctl enable --now reflector.timer
#+end_src

*** Bluetooth service
#+begin_src sh
  systemctl enable --now bluetooth.service
#+end_src

*** Ssh service
#+begin_src sh
  systemctl enable --now sshd.service
#+end_src

** Configuration Files

*** Audio devices

**** Speakers
Check kernel driver for audio device
#+begin_src sh
  lspci -knn|grep -iA2 audio
#+end_src
If it is snd_hda_intel add kernel module
#+begin_src sh
  sudo cp ~/dotfiles/deploy/arch-repo/installation/files/etc/modprobe.d/default.conf /etc/modprobe.d/
#+end_src

**** Avoid annoying fn key beeping
#+begin_src sh
  sudo cp ~/dotfiles/deploy/arch-repo/installation/files/etc/modprobe.d/nobeep.conf /etc/modprobe.d/
#+end_src

**** Load /dev/mixer module
#+begin_src sh
  sudo cp ~/dotfiles/deploy/arch-repo/installation/files/etc/modules-load.d/modules.conf /etc/modules-load.d/
#+end_src

*** Swappiness
Reduce the swappiness to improve system responsiveness
#+begin_src sh
  sudo cp ~/dotfiles/deploy/arch-repo/installation/files/etc/sysctl.d/99-swappiness.conf /etc/sysctl.d/
#+end_src
=sysctl vm.swappiness= to check the current swappiness value (0-200)

*** Pacman
**** Hooks

***** paccache
#+begin_src sh
  sudo cp ~/dotfiles/deploy/arch-repo/installation/files/usr/share/libalpm/hooks/paccache.hook /usr/share/libalpm/hooks/
#+end_src

*** Autologin on tty2
#+begin_src sh
  sudo cp ~/dotfiles/deploy/arch-repo/installation/files/etc/systemd/system/getty@tty2.service.d/override.conf /etc/systemd/system/getty@tty2.service.d/
#+end_src

*** XDG-base-directory specifications

**** =/etc/gemrc=
Comment =gem: --user-install=

**** =/etc/xboard.conf=
Modify =saveSettingsFile= and =settingsFile= to =~/.config/xboardrc=

** Note

*** OpenFOAM: download from github and compile it
( requires AUR scotch-git and base cgal and paraview )

*** Matlab
can be installed by donwloading it and run the installer with administrator privileges
The temp directory may run out of space so you can
#+begin_src sh
  mkdir "$HOME/matlabdl"
  sudo mount --bind -o nonempty "$HOME/matlabdl" /tmp
#+end_src
and when the installation process is finished
#+begin_src sh
  sudo umount /tmp
  rm -rf $HOME/matlabdl
#+end_src

libselinux libsepol are requested and can be installed from the AUR
#+begin_src sh
  auracle clone libselinux libsepol
#+end_src

also =/usr/local/MATLAB/R2019b/cefclient/sys/os/glnxa64/=
- libgio
- liglib
- libgmodule
- libgobject
- libgthread

causes problem to the documentation rendering....
#+begin_src sh
  sudo mkdir /usr/local/MATLAB/R2019b/cefclient/sys/os/glnxa64/Exclude
  sudo mv /usr/local/MATLAB/R2019b/cefclient/sys/os/glnxa64/libglib* -t/usr/local/MATLAB/R2019b/cefclient/sys/os/glnxa64/Exclude
#+end_src

**** Add Symlink for Mlint
#+begin_src shell
  sudo ln -sv /usr/local/MATLAB/R2019b/bin/glnxa64/mlint /usr/local/bin/mlint
#+end_src

** NeoVim Nightly
NeoVim v5.0 will be soon released

*** Build prerequisites
Additional (not already installed) packages required to build neovim from source
#+begin_src shell
  sudo pacman -S --needed ninja tree-sitter
#+end_src

*** Building
#+begin_src shell
  make CMAKE_BUILD_TYPE=RelWithDebInfo
  sudo make CMAKE_INSTALL_PREFIX=/usr install
#+end_src
