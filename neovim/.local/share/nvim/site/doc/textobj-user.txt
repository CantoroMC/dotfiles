*textobj-user.txt*  Create your own text objects

Version 0.7.6
Script ID: 2100
Copyright (C) 2007-2018 Kana Natsuno <http://whileimautomaton.net/>

CONTENTS                                        *textobj-user-contents*

Introduction    |textobj-user-introduction|
Philosophy      |textobj-user-philosophy|
Reference       |textobj-user-reference|
Known issues    |textobj-user-known-issues|

==============================================================================
INTRODUCTION                                    *textobj-user-introduction*

*textobj-user* is a Vim plugin to create your own text objects without pain.
It is hard to create text objects, because there are many pitfalls to deal
with.  This plugin hides such details and provides a declarative way to define
text objects.  You can use regular expressions to define simple text objects,
or use functions to define complex ones.  For example...

                                                *textobj-user-example-simple*
(a) Define "ad"/"id" to select a date such as "2013-03-16", and
    define "at"/"it" to select a time such as "22:04:21":
>
  call textobj#user#plugin('datetime', {
  \   'date': {
  \     'pattern': '\<\d\d\d\d-\d\d-\d\d\>',
  \     'select': ['ad', 'id'],
  \   },
  \   'time': {
  \     'pattern': '\<\d\d:\d\d:\d\d\>',
  \     'select': ['at', 'it'],
  \   },
  \ })
<
                                                *textobj-user-example-between*
(b) Define "aA" to select text from "<<" to the matching ">>", and
    define "iA" to select text inside "<<" and ">>":
>
  call textobj#user#plugin('braces', {
  \   'angle': {
  \     'pattern': ['<<', '>>'],
  \     'select-a': 'aA',
  \     'select-i': 'iA',
  \   },
  \ })
<
                                                *textobj-user-example-complex*
(c) Define "al" to select the current line, and
    define "il" to select the current line without indentation:
>
  call textobj#user#plugin('line', {
  \   '-': {
  \     'select-a-function': 'CurrentLineA',
  \     'select-a': 'al',
  \     'select-i-function': 'CurrentLineI',
  \     'select-i': 'il',
  \   },
  \ })

  function! CurrentLineA()
    normal! 0
    let head_pos = getpos('.')
    normal! $
    let tail_pos = getpos('.')
    return ['v', head_pos, tail_pos]
  endfunction

  function! CurrentLineI()
    normal! ^
    let head_pos = getpos('.')
    normal! g_
    let tail_pos = getpos('.')
    let non_blank_char_exists_p = getline('.')[head_pos[2] - 1] !~# '\s'
    return
    \ non_blank_char_exists_p
    \ ? ['v', head_pos, tail_pos]
    \ : 0
  endfunction
<
                                                *textobj-user-example-filetype*
(d) Define "a(" to select text from "\left(" to the matching "\right)", and
    define "i(" to select text inside "\left(" to the matching "\right)",
    but only for tex files:
>
  call textobj#user#plugin('tex', {
  \   'paren-math': {
  \     'pattern': ['\\left(', '\\right)'],
  \     'select-a': [],
  \     'select-i': [],
  \   },
  \ })

  augroup tex_textobjs
    autocmd!
    autocmd FileType tex call textobj#user#map('tex', {
    \   'paren-math': {
    \     'select-a': '<buffer> a(',
    \     'select-i': '<buffer> i(',
    \   },
    \ })
  augroup END
<

You can define your own text objects like the above examples.
See also |textobj-user-reference| for more details.

There are many text objects written with textobj-user.  If you want to find
useful ones, or to know how they are implemented, see the following page:
https://github.com/kana/vim-textobj-user/wiki

Requirements:
- Vim 7.4 or later

Latest version:
https://github.com/kana/vim-textobj-user

==============================================================================
PHILOSOPHY                                      *textobj-user-philosophy*

Suppose that you define custom text objects.  Why do you define them?
You must believe that they are useful and they boost your productivity.
Such text objects are also useful for other users.
If so, why don't you share them as a plugin?

This is the reason why textobj-user provides just one function
|textobj#user#plugin()|.  It defines not only key mappings like aX/iX for
custom text objects, but also everything that is necessary to share as
a plugin.  For example, one might prefer aY/iY to aX/iX for custom text
objects.  So that it's necessary to provides a way for such customization,
but it's somewhat tedious to define such stuffs by hand.

==============================================================================
REFERENCE                                       *textobj-user-reference*

                                                *textobj#user#plugin()*
textobj#user#plugin({plugin-name}, {specs})
  Define custom text objects according to {specs}, and
  define also utilities to easily share custom text objects as a plugin
  which name is {plugin-name}.

  {plugin-name} is a string which consists of English alphabets.
  This name is used various key mappings, Ex commands, and variables.

  {specs} is a |Dictionary| for definitions of custom text objects.
  See also |textobj-user-specs| for details.

  For example,
>
    call textobj#user#plugin('datetime', {
    \   'date': {
    \     'pattern': '\<\d\d\d\d-\d\d-\d\d\>',
    \     'select': ['ad', 'id'],
    \   },
    \   'time': {
    \     'pattern': '\<\d\d:\d\d:\d\d\>',
    \     'select': ['at', 'it'],
    \   },
    \ })
<
  many stuffs are defined with the above definition:

                                                *:Textobj{Plugin}DefKeyMaps*
  (a) An Ex command :TextobjDatetimeDefKeyMaps is defined.
  The Ex command defines default key mappings for custom text objects,
  but it doesn't override existing key mappings unless "!" is given.

  In this example, the Ex command maps "ad", "id", "at" and "it" to
  custom text objects in Operator-pending mode and Visual mode.  ({lhs}
  is also mapped in Select mode if it starts with a non-printable
  character such as <C-d>)

                                *<Plug>(textobj-{plugin}-{object}-{operation})*
  (b) Interface key mappings such as <Plug>(textobj-datetime-date) are
  defined in Operator-pending mode, Visual mode and Select mode.  These
  key mappings are defined for extra customization for users.

  For example, one might prefer "aT" and "iT" to select a time, because
  |at| and |it| are bound to the extremely useful text objects to select
  a tag block by default, and it is usually a bad idea to override them.
  In this case, interface key mappings are used as follows:
>
    xmap aT  <Plug>(textobj-datetime-time)
    omap aT  <Plug>(textobj-datetime-time)
    xmap iT  <Plug>(textobj-datetime-time)
    omap iT  <Plug>(textobj-datetime-time)
<
                                *g:textobj_{plugin}_no_default_key_mappings*
  (c) Finally :TextobjDatetimeDefKeyMaps is executed by default
  to define default key mappings -- "ad", "id", "at" and "it".

  As described in (b), sometimes users do not want to use default key
  mappings such as "at" and "it".  If
  g:textobj_datetime_no_default_key_mappings is set to true, default key
  mappings will not be defined.

  For backward compatibility, if {specs} contains a key
  "*no-default-key-mappings*", default key mappings will not be defined.
  But this feature will be removed in a future version.

------------------------------------------------------------------------------
                                                *textobj-user-specs*
Specification for a text object ~

|textobj#user#plugin()| takes {specs} for custom text objects.  {specs} is
a |Dictionary|, and it is treated as a sequence of key-value pairs, where key
is the name of a text object and value is the specification of a text object.

The specification of a text object consists of various properties.  Properties
are expressed as a single dictionary.  Each key is the name of a property.
The following properties are available:

"move-n"      {lhs} or [{lhs}, ...]
  The value must be a string or a list of strings.  Each string is
  treated as a {lhs} of a default key mapping to move the cursor to the
  next text object.

  A target text object is determined by
  - the "pattern" property with a single regular expression, or
  - the "move-n-function" property.

"move-p"      {lhs} or [{lhs}, ...]
"move-N"      {lhs} or [{lhs}, ...]
"move-P"      {lhs} or [{lhs}, ...]
  Like "move-n", but {lhs} is used as a default key mapping to move the
  cursor to
  - the previous text object,
  - the end of the next text object, or
  - the end of the previous text object.

"select"      {lhs} or [{lhs}, ...]
  Like "move-n", but {lhs} is used as a default key mapping to select
  the text object under the cursor.  See also |textobj-user-scan|.

  A target text object is determined by
  - the "pattern" property with a single regular expression, or
  - the "select-function" property.

"select-a"      {lhs} or [{lhs}, ...]
"select-i"      {lhs} or [{lhs}, ...]
  Like "select", but {lhs} is used as a default key mapping to select
  "a" text object or "inner" text object, like |ab|, |ip| and other
  built-in text objects.

  A target text object is determined by
  - the "pattern" property with a pair of regular expressions,
  - the "select-a-function" property, or
  - the "select-i-function" property.

"pattern"     {regexp} or [{regexp}, {regexp}]
  A single regular expression or a list of two regular expressions to
  determine a target text object.

  With a single regular expression:
    A region matched to the regular expression is treated as
    a target text object.

  With a pair of regular expressions:
    A region between two parts is treated as a target text object,
    where the 1st part is matched to the 1st regular expression
    and the 2nd part is matched to the 2nd regular expression.

                *textobj-user-region-type*
"region-type"     {char}  (default: "v")
  A single character string that specifies the type of a region defined
  by the "pattern" property.  Possible values are as follows:

    Value           Meaning         ~
    ------------------------------- ~
    "v"             Characterwise
    "V"             Linewise
    "\<C-v>"        Blockwise

                 *textobj-user-scan*
"scan"        {string}  (default: "forward")
  A string that specifies how to find a "pattern"-based text object for
  "select".  Possible values are:

  "cursor"
    Try to find from text under the cursor.

  "forward"
    Try to find from text:
    (1) Under the cursor
    (2) After the cursor

  "line"
    Try to find from text:
    (1) Under the cursor
    (2) In the current line and after the cursor
    (3) In the current line and before the cursor

  "nearest"
    Try to find from text:
    (1) Under the cursor
    (2) In the current line and after the cursor
    (3) In the current line and before the cursor
    (4) After the current line
    (5) Before the current line

"{property}-function"   {fname}
  If this property is defined, the function named {fname} instead of the
  "pattern" property is used to determine a target text object for
  a "{property}" operation.

  The function...
  - Must take no argument, and
  - Must return a list to denote the region occupied by a target text
    object, or must return 0 to denote that there is no text object.

  The format of a list a list to denote the region is as follows:

    [region_type, start_position, end_position]

  - "region_type" is a single-character string to specify the type of
    a region.  See |textobj-user-region-type| for valid values.
  - "start_position" denotes the start position of a region.
    The detail of this value is the same as |getpos()|.
  - "end_position" is like "start_position", but it denotes the
    end position of a region.

  See |textobj-user-example-complex| for an example.

"sfile"       {string}
  Value must be expand('<sfile>').  This value is used to
  calculate <SNR> prefix for script-local functions which are
  given to "{property}-function".

==============================================================================
KNOWN ISSUES                                    *textobj-user-known-issues*

- Count is not supported by vim-textobj-user.  Because the meaning of a count
  depends on each custom text object.  If you want to support count for your
  custom text object, define it with "{property}-function" and use |v:count|
  and/or |v:count1| to get an actual count.

- For built-in text objects such as |aw|, |ip| and others, visually selected
  region is extended by repeating a text object like "vawawaw...".  Such
  extending is not supported by vim-textobj-user.  Because it's not trivial
  to support for all of custom text objects.  While some text objects like
  |aw| simply extends the current selection, other text objects like |ab|
  might override the current selection depending on a context.

- Custom text objects with |o_CTRL-V| may not work properly.

- In Vim older than 7.3.918, |.| fails to correctly repeat the last operation
  with a custom text object.

- In Vim 7.3.918 or later, |.| shows underlying key sequence in Command line
  to repeat the last operation with a custom text object.  (The key sequence
  seems to be stored in the redo buffer for repeatability.  So that it is not
  possible to hide the key sequence by |:map-<silent>|.)

- See also: https://github.com/kana/vim-textobj-user/issues

==============================================================================

vim:tw=78:ts=8:ft=help:norl:
