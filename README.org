#+TITLE: Dotfiles Deployment
#+AUTHOR: Marco Cantoro
#+EMAIL: marco.cantoro92@outlook.it
#+STARTUP: overview
#+OPTIONS: toc:2 num:3
#+PROPERTY: header-args:sh :tangle ./deploy.sh

* Package-Management

** Update packages and retrieve the latest Pacman mirrorlist
   #+begin_src sh
     sudo pacman -Syu
     sudo reflector --protocol http,https --fastest 5 --latest 100 --age 24 --country Italy,France,German,Spain,Switzerland --save /etc/pacman.d/mirrorlist
   #+end_src

** Installing packages with pacman:
   #+begin_src sh
     sudo pacman -S --needed - < ~/dotfiles/deploy/pacman-packages/bull-packages.txt
     sudo pacman -S --needed - < ~/dotfiles/deploy/pacman-packages/gtk-packages.txt
     sudo pacman -S --needed - < ~/dotfiles/deploy/pacman-packages/x-packages.txt
     sudo pacman -S --needed - < ~/dotfiles/deploy/pacman-packages/programming-packages.txt
     sudo pacman -S --noconfirm --needed --asdeps - < ~/dotfiles/deploy/pacman-packages/dependent-packages.txt
   #+end_src
   Also, programs in =./deploy/unix-programs= can be installed.

** Installing AUR packages with yay
   #+begin_src sh
     yay -S --noansweredit --needed - < ~/dotfiles/deploy/aur-packages.txt
   #+end_src

** Youtube-dl
   #+begin_src sh
     sudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl
     sudo chmod a+rx /usr/local/bin/youtube-dl
   #+end_src

* First deployment step
  It is wise to check with =stow -nv package= every one of them.
  #+begin_src sh
    mkdir ~/.config/git
    stow git

    mkdir ~/.config/emacs
    stow emacs

    mkdir ~/.config/nvim
    stow nvim

    stow texlive
    stow zathura

    mkdir ~/.config/mpd
    stow music

    mkdir ~/.config/neomutt
    stow mail
  #+end_src

* Shell and X-WindowManager

** Oh My Zsh
   Install Oh my zsh
   #+begin_src sh
     [[ -d $HOME/.config/zsh ]] || mkdir $HOME/.config/zsh
     wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
     ZSH="$HOME/.config/zsh/oh-my-zsh" sh install.sh
   #+end_src

** Zsh plugins
   #+begin_src sh
     [ -e ~/.config/zsh/oh-my-zsh/custom/plugins/zsh-history-substring-search ] || \
       git clone https://github.com/zsh-users/zsh-history-substring-search \
       ~/.config/zsh/oh-my-zsh/custom/plugins/zsh-history-substring-search
     [ -e ~/.config/zsh/oh-my-zsh/custom/plugins/zsh-autosuggestions ] || \
       git clone https://github.com/zsh-users/zsh-autosuggestions \
       ~/.config/zsh/oh-my-zsh/custom/plugins/zsh-autosuggestions
     [ -e ~/dotfiles/zsh/plugins/fzf-tab ] || \
       git clone https://github.com/Aloxaf/fzf-tab \
       ~/.config/zsh/oh-my-zsh/custom/plugins/fzf-tab
   #+end_src

** Second Deployment Step
   #+begin_src sh
     mkdir ~/.local/bin
     stow shell

     mkdir ~/.local/share/fonts
     mkdir -p ~/.config/xmonad/cache
     mkdir ~/.local/share/xmonad
     stow x-window
   #+end_src
   Then reboot

** Remove unwanted packages and Login with dwm
#+begin_src sh
  sudo pacman -Rns - < ~/dotfiles/deploy/pacman-packages/unwanted-packages.txt
#+end_src

* System Tweaks

** Systemd

*** Reflector timer
#+begin_src sh
  sudo systemctl enable reflector.timer
  sudo systemctl start reflector.timer
#+end_src

*** Bluetooth service
#+begin_src sh
  sudo systemctl enable bluetooth.service
  sudo systemctl start bluetooth.service
#+end_src

** Audio device
Check audio-device and drivers and create modprobe
#+begin_src sh
  lspci -knn|grep -iA2 audio
  sudo touch /etc/modprobe.d/default.conf
  echo "options snd_hda_intel index=1" | sudo tee -a /etc/modprobe.d/default.conf
#+end_src
check the audio with =speaker-test -c2= after reboot

In order to load /dev/mixer for slstatus
#+begin_src sh
  sudo touch /etc/modules-load.d/modules.conf
  echo "snd_pcm_oss" | sudo tee -a /etc/modules-load.d/modules.conf
#+end_src

** Swappiness
Reduce the swappiness for better to improve system responsiveness
#+begin_src sh
  sudo touch /etc/sysctl.d/99-swappiness.conf
  echo "vm.swappiness=10" | sudo tee -a /etc/sysctl.d/99-swappiness.conf
#+end_src
=sysctl vm.swappiness= to check the current swappiness value (0-200)

** REVIEWING Pacman Configuration
=/etc/pacman.conf=
Modify to suit your needs (ex. Color, ILoveCandy)

** Hooks

*** =paccache=
#+begin_src sh
  sudo touch /usr/share/libalpm/hooks/paccache.hook
  cat ~/dotfiles/deploy/hooks/paccacheHook.txt | sudo tee -a /usr/share/libalpm/hooks/paccache.hook
#+end_src

** Modify /etc/*.config to respect XDG-base-directory specifications
*** Gem
Remove =gem: --user-install= from =/etc/gemrc=
*** Xboard
Modify =saveSettingsFile= and =settingsFile= to =~/.config/xboardrc=
in =/etc/xboard.conf=

* Utilities of programming languages

** Haskell and XMonad

*** Deploy the haskell dotfiles
#+begin_src sh
  mkdir ~/.stack
  mkdir ~/.cabal
  mkdir ~/.ghc
  stow haskell
#+end_src

*** Setup stack and install cabal-install
#+begin_src sh
  stack setup --system-ghc
  stack install --system-ghc cabal-install

  cabal update
  cabal install cabal-uninstall
#+end_src
=ghc-pkg list= to check if you have installed only statically linked Haskell packages.
Now you re ready to go!

*** XMonad and XMobar
#+begin_src sh
  cabal install --lib xmonad
  cabal install xmonad
  cabal install --lib xmonad-contrib
  cabal install --lib xmobar --flags="all_extensions"
#+end_src

*** Pandoc
#+begin_src sh
  cabal install pandoc
#+end_src

*** Utilitites
#+begin_src sh
  cabal install hlint
  cabal install hoogle
  # cabal install utf8-string-1.0.1.1 ListLike-4.7.3 hoogle # (may fix the current issue)
  cabal install brittany
#+end_src

** Go

*** Bibtex-ls
#+begin_src sh
  go get github.com/msprev/fzf-bibtex/cmd/bibtex-ls
  go install github.com/msprev/fzf-bibtex/cmd/bibtex-ls
  go install github.com/msprev/fzf-bibtex/cmd/bibtex-markdown
  go install github.com/msprev/fzf-bibtex/cmd/bibtex-cite
#+end_src

** Python
#+begin_src shell
  pip install neovim-remote pylint
#+end_src

** Ruby
#+begin_src sh
  gem install neovim solargraph colorls
#+end_src

** Node
#+begin_src shell
  npm install -g neovim
#+end_src

** Perl
#+begin_src sh
  cpan Perl::LanguageServer
  # cpan Neovim::Ext # not working
#+end_src

* Note

** OpenFOAM: download from github and compile it
( requires AUR scotch-git and base cgal )

** Matlab
can be installed by donwloading it and run the installer with administrator privileges
The temp directory may run out of space so you can
#+begin_src sh
  mkdir "$HOME/matlabdl"
  sudo mount --bind -o nonempty "$HOME/matlabdl" /tmp
#+end_src
and when the installation process is finished
#+begin_src sh
    sudo umount /tmp
    rm -rf $HOME/matlabdl
#+end_src

libselinux libsepol are requested and can be installed from the AUR
#+begin_src sh
  yay -S --noansweredit libselinux libsepol
#+end_src

also =/usr/local/MATLAB/R2019b/cefclient/sys/os/glnxa64/libglib=
causes problem to the documentation rendering....
#+begin_src sh
  sudo mkdir /usr/local/MATLAB/R2019b/cefclient/sys/os/glnxa64/Exclude
  sudo mv /usr/local/MATLAB/R2019b/cefclient/sys/os/glnxa64/libglib* -t/usr/local/MATLAB/R2019b/cefclient/sys/os/glnxa64/Exclude
#+end_src
