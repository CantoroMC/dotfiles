:unset +s +t
:set +m -v0
:seti -w -XOverloadedStrings
:set editor nvim

-- definitions
:def! rr \_ -> return ":script ~/.ghci/ghci.conf"
:def! ls \s -> return $ ":!ls " ++ s
:def! cl \_ -> return ":!clear"

prompt
:{
dotGHCI_myPrompt promptString ms _ = do
  pwd <- getpwd
  let main_module = head' [ m' | (m:m') <- ms, m == '*' ]
  -- Put together the final prompt string.
  -- ANSI escape sequences allow for displaying colours in compatible terminals.
  -- See [http://www.lihaoyi.com/post/BuildyourownCommandLinewithANSIescapecodes.html this guide] for help interpreting them.
  return $ concat [ "\ESC[33m\STX", pwd, main_module, "\ESC[37m\STX", promptString, " \ESC[0m\STX\n" ]
  where
    head' (x:_) = " \ESC[38;5;227m\STX" ++ x
    head' _     = ""
    getpwd = getpwd' <$> System.Environment.getEnv "HOME" <*> System.Posix.getWorkingDirectory
    getpwd' home pwd = if zipWith const pwd home == home
                         then '~':drop (length home) pwd
                         else pwd
:}
:set prompt-function dotGHCI_myPrompt "\ESC[38;5;129m \STX\xe61f"
:set prompt-cont-function dotGHCI_myPrompt "âˆ·"

-- hlint and hoogle
dotGHCI_escapeShellArg arg = "'" ++ concatMap (\c -> if c == '\'' then "'\\''" else [c]) arg ++ "'"
:def! hoogle return . (":!hoogle -q --count=15 --color " ++) . dotGHCI_escapeShellArg
:def! search return . (":!hoogle -q --count=3 --color " ++) . dotGHCI_escapeShellArg
:def! doc return . (":!hoogle -q --color --info " ++) . dotGHCI_escapeShellArg
:def! hlint \s -> return $ ":!hlint " ++ if null s then "." else s



-- Turn on output of types.  This line should be last.
:set +t
-- vim:ft=haskell
