:unset +s +t
:set +m -v0
:seti -w -XOverloadedStrings
:set editor nvim

-- definitions
:def! rr \_ -> return ":script ~/.ghci/ghci.conf"
:def! ls \s -> return $ ":!ls " ++ s
:def! cl \_ -> return ":!clear"

-- prompt
:{
dotGhciPrompt :: String -> [String] -> p -> IO String
dotGhciPrompt promptString ms _ = do
    pwd <- getpwd
    let main_module = head' [ m' | (m:m') <- ms, m == '*' ]
    return $ concat [ "\ESC[33m\STX", pwd, main_module, "\ESC[37m\STX", promptString, " \ESC[0m\STX\n" ]
      where
        head' (x:_) = " \ESC[38;5;227m\STX" ++ x
        head' _     = ""
        getpwd = getpwd' <$> System.Environment.getEnv "HOME" <*> System.Posix.getWorkingDirectory
        getpwd' home pwd = if zipWith const pwd home == home
                              then '~':drop (length home) pwd
                              else pwd
:}
:set prompt-function dotGhciPrompt "\ESC[38;5;129m \STX\xe61f"
:set prompt-cont-function dotGhciPrompt " âˆ· "

-- hlint and hoogle
:{
dotGhciEscapeShellArg :: Foldable t => t Char -> String
dotGhciEscapeShellArg arg = "'" ++ concatMap (\c -> if c == '\'' then "'\\''" else [c]) arg ++ "'"
:}
:def! hoogle return . (":!hoogle -q --count=15 --color " ++) . dotGhciEscapeShellArg
:def! search return . (":!hoogle -q --count=3 --color " ++) . dotGhciEscapeShellArg
:def! doc return . (":!hoogle -q --color --info " ++) . dotGhciEscapeShellArg
:def! hlint \s -> return $ ":!hlint " ++ if null s then "." else s



-- Turn on output of types.  This line should be last.
:set +t

-- vim:ft=haskell.ghci
