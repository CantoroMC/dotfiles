# Configuration for Alacritty, the GPU enhanced terminal emulator.

# Configuration {{{1

env:
  TERM: xterm-256color

# window {{{2
window:
  dimensions:
    columns: 120
    lines: 50

  position:
    x: 500
    y: 30

  padding:
    x: 0
    y: 0
  dynamic_padding: false

  decorations: full
  startup_mode: Windowed

  title: Alacritty
  dynamic_title: true

  class:
    instance: Alacritty
    general: Alacritty

  gtk_theme_variant: None
# }}}

# scrolling {{{2
scrolling:
  history: 10000
  multiplier: 3
# }}}

# font {{{2
font:
  normal:
    family: SauceCodePro Nerd Font
    style: Regular

  bold:
    family: SauceCodePro Nerd Font
    style: Bold

  italic:
    family: SauceCodePro Nerd Font
    style: Italic

  bold_italic:
    family: SauceCodePro Nerd Font
    style: Bold Italic

  size: 9.0

  offset:
    x: 0
    y: 0

  glyph_offset:
    x: 0
    y: 0
# }}}

draw_bold_text_with_bright_colors: false

# colors {{{2
colors:

  # # One Half Light {{{3
  # primary:
  #   background: '0xfafafa'
  #   foreground: '0x383a42'

  # normal:
  #   black: '0x383a42'
  #   red: '0xe45649'
  #   green: '0x50a14f'
  #   yellow: '0xc18401'
  #   blue: '0x0184bc'
  #   magenta: '0xa626a4'
  #   cyan: '0x0997b3'
  #   white: '0xfafafa'

  # bright:
  #   black: '0x383a42'
  #   red: '0xe45649'
  #   green: '0x50a14f'
  #   yellow: '0xc18401'
  #   blue: '0x0184bc'
  #   magenta: '0xa626a4'
  #   cyan: '0x0997b3'
  #   white: '0xfafafa'
  #   # }}}

  # Ayu {{{3
  primary:
    background: '#0f1419'
    foreground: '#ffffff'

  cursor:
    cursor: '#B8CC52'
    text: '#ffffff'

  vi_mode_cursor:
    text: CellBackground
    cursor: CellForeground

  selection:
    background: '#253340'
    text: '#e6e1cf'

  search:
    matches:
      foreground: '#151a1e'
      background: '#E7C547'

    bar:
      background: '#151a1e'
      foreground: '#B8CC52'

  normal:
    black: '#000000'
    red: '#ff3333'
    green: '#b8cc52'
    yellow: '#e7c547'
    blue: '#36a3d9'
    magenta: '#f07178'
    cyan: '#95e6cb'
    white: '#ffffff'

  bright:
    black: '#323232'
    red: '#ff6565'
    green: '#eafe84'
    yellow: '#fff779'
    blue: '#68d5ff'
    cyan: '#c7fffd'
    magenta: '#ffa3aa'
    white: '#ffffff'
  # }}}

  indexed_colors: []
# }}}

# bell {{{2
bell:

  # Values for `animation` of the Visual Bell:
  # Ease, EaseOut, EaseOutSine, EaseOutQuad, EaseOutCubic, EaseOutQuart
  # EaseOutQuint, EaseOutExpo, EaseOutCirc, Linear
  animation: EaseOutExpo
  duration: 0
  color: '#e7c547'

  # command:
  #   program: notify-send
  #   args: ["Visual Bell ﲌ "]
# }}}

background_opacity: 0.9

# selection {{{2
selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>\t"
  save_to_clipboard: false
# }}}

# cursor {{{2
cursor:
  style: Underline
  vi_mode_style: Beam
  unfocused_hollow: true
  thickness: 0.10
# }}}

live_config_reload: true

# shell {{{2
shell:
  program: /bin/zsh
  args:
    - --login
# }}}

# mouse {{{2
mouse:
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }
  hide_when_typing: true

  url:
    launcher:
      program: xdg-open
      args: []

    modifiers: Shift
# }}}

# }}}

# Mouse bindings {{{1
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
# To trigger mouse bindings when an application running within Alacritty captures the mouse, the
# `Shift` modifier is automatically added as a requirement.
# Each mouse binding will specify a:
# - `mouse`:
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
# - `action` (see key bindings)
# And optionally:
# - `mods` (see key bindings)
#mouse_bindings:
#  - { mouse: Middle, action: PasteSelection }
# }}}

# Key bindings {{{1
# `- { key: V, mods: Control|Shift, action: Paste }`

# - `key`: Identifier of the key pressed {{{2
#    - A-Z, F1-F24, Key0-Key9
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#       `showkey --scancodes`.
# }}}
#
# - `chars`: Send a byte sequence to the running application {{{2
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
# }}}
#
# - `action`: Execute a predefined action {{{2
#   - ToggleViMode                      #   (`mode: Vi` only):
#   - SearchForward                     #   - Open
#   - SearchBackward                    #   - Up
#   - Copy                              #   - Down
#   - Paste                             #   - Left
#   - PasteSelection                    #   - Right
#   - IncreaseFontSize                  #   - First
#   - DecreaseFontSize                  #   - Last
#   - ResetFontSize                     #   - FirstOccupied
#   - ScrollPageUp                      #   - High
#   - ScrollPageDown                    #   - Middle
#   - ScrollHalfPageUp                  #   - Low
#   - ScrollHalfPageDown                #   - SemanticLeft
#   - ScrollLineUp                      #   - SemanticRight
#   - ScrollLineDown                    #   - SemanticLeftEnd
#   - ScrollToTop                       #   - SemanticRightEnd
#   - ScrollToBottom                    #   - WordRight
#   - ClearHistory                      #   - WordLeft
#   - Hide                              #   - WordRightEnd
#   - Minimize                          #   - WordLeftEnd
#   - Quit                              #   - Bracket
#   - ToggleFullscreen                  #   - ToggleNormalSelection
#   - SpawnNewInstance                  #   - ToggleLineSelection
#   - ClearLogNotice                    #   - ToggleBlockSelection
#   - ClearSelection                    #   - ToggleSemanticSelection
#   - ReceiveChar                       #   - SearchNext
#   - None                              #   - SearchPrevious
                                        #   - SearchStart
                                        #   - SearchEnd
#   (Linux/BSD only):
#   - CopySelection: Copies into selection buffer
#
# - `command`: Fork and execute a specified command plus arguments
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
# }}}

# - `mods`: (optional) Key modifiers to filter binding actions {{{2
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
# }}}
#
# - `mode`: Indicate a binding for only specific terminal reported modes {{{2
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#    - AppCursor
#    - AppKeypad
#    - Alt
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
# }}}
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
# If the same trigger is assigned to multiple actions, all of them are executed
# in the order they were defined in.

key_bindings:
  #- { key: Paste,                                action: Paste          }
  #- { key: Copy,                                 action: Copy           }
  - { key: L,         mods: Control,             action: ClearLogNotice }
  - { key: L,         mods: Control, mode: ~Vi,  chars: "\x0c"          }
  - { key: PageUp,    mods: Shift,   mode: ~Alt, action: ScrollPageUp,  }
  - { key: PageDown,  mods: Shift,   mode: ~Alt, action: ScrollPageDown }
  - { key: Home,      mods: Shift,   mode: ~Alt, action: ScrollToTop,   }
  - { key: End,       mods: Shift,   mode: ~Alt, action: ScrollToBottom }

  # Vi Mode
  - { key: Space,  mods: Shift|Control, mode: Vi, action: ScrollToBottom          }
  - { key: Space,  mods: Shift|Control,           action: ToggleViMode            }
  - { key: Escape,                      mode: Vi, action: ClearSelection          }
  - { key: I,                           mode: Vi, action: ScrollToBottom          }
  - { key: I,                           mode: Vi, action: ToggleViMode            }
  #- { key: Y,      mods: Control,       mode: Vi, action: ScrollLineUp            }
  #- { key: E,      mods: Control,       mode: Vi, action: ScrollLineDown          }
  #- { key: G,                           mode: Vi, action: ScrollToTop             }
  #- { key: G,      mods: Shift,         mode: Vi, action: ScrollToBottom          }
  #- { key: B,      mods: Control,       mode: Vi, action: ScrollPageUp            }
  #- { key: F,      mods: Control,       mode: Vi, action: ScrollPageDown          }
  #- { key: U,      mods: Control,       mode: Vi, action: ScrollHalfPageUp        }
  #- { key: D,      mods: Control,       mode: Vi, action: ScrollHalfPageDown      }
  - { key: Y,                           mode: Vi, action: Copy                    }
  - { key: Y,                           mode: Vi, action: ClearSelection          }
  #- { key: Copy,                        mode: Vi, action: ClearSelection          }
  - { key: V,                           mode: Vi, action: ToggleNormalSelection   }
  - { key: V,      mods: Shift,         mode: Vi, action: ToggleLineSelection     }
  - { key: V,      mods: Control,       mode: Vi, action: ToggleBlockSelection    }
  - { key: V,      mods: Alt,           mode: Vi, action: ToggleSemanticSelection }
  - { key: Return,                      mode: Vi, action: Open                    }
  - { key: K,                           mode: Vi, action: Up                      }
  - { key: J,                           mode: Vi, action: Down                    }
  - { key: H,                           mode: Vi, action: Left                    }
  - { key: L,                           mode: Vi, action: Right                   }
  #- { key: Up,                          mode: Vi, action: Up                      }
  #- { key: Down,                        mode: Vi, action: Down                    }
  #- { key: Left,                        mode: Vi, action: Left                    }
  #- { key: Right,                       mode: Vi, action: Right                   }
  #- { key: Key0,                        mode: Vi, action: First                   }
  #- { key: Key4,   mods: Shift,         mode: Vi, action: Last                    }
  #- { key: Key6,   mods: Shift,         mode: Vi, action: FirstOccupied           }
  - { key: H,      mods: Shift,         mode: Vi, action: High                    }
  - { key: M,      mods: Shift,         mode: Vi, action: Middle                  }
  - { key: L,      mods: Shift,         mode: Vi, action: Low                     }
  - { key: B,                           mode: Vi, action: SemanticLeft            }
  - { key: W,                           mode: Vi, action: SemanticRight           }
  - { key: E,                           mode: Vi, action: SemanticRightEnd        }
  - { key: B,      mods: Shift,         mode: Vi, action: WordLeft                }
  - { key: W,      mods: Shift,         mode: Vi, action: WordRight               }
  - { key: E,      mods: Shift,         mode: Vi, action: WordRightEnd            }
  #- { key: Key5,   mods: Shift,         mode: Vi, action: Bracket                 }
  - { key: Slash,                       mode: Vi, action: SearchForward           }
  - { key: Slash,  mods: Shift,         mode: Vi, action: SearchBackward          }
  - { key: N,                           mode: Vi, action: SearchNext              }
  - { key: N,      mods: Shift,         mode: Vi, action: SearchPrevious          }

  # (Windows, Linux, and BSD only)
  - { key: V,        mods: Control|Shift,           action: Paste            }
  - { key: C,        mods: Control|Shift,           action: Copy             }
  - { key: C,        mods: Control|Shift, mode: Vi, action: ClearSelection   }
  #- { key: Insert,   mods: Shift,                   action: PasteSelection   }
  #- { key: Key0,     mods: Control,                 action: ResetFontSize    }
  #- { key: Equals,   mods: Control,                 action: IncreaseFontSize }
  #- { key: Add,      mods: Control,                 action: IncreaseFontSize }
  #- { key: Subtract, mods: Control,                 action: DecreaseFontSize }
  #- { key: Minus,    mods: Control,                 action: DecreaseFontSize }
# }}}

# debug {{{2
debug:
  render_timer: false
  persistent_logging: false
  log_level: Warn
  print_events: false
# }}}

# vim:fen:fdm=marker:fdl=0:ts=2:sts=2:et:sw=2:sr:tw=78
