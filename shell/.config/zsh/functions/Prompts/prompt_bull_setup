prompt_bull_help () {
  cat <<EOH
This prompt is color-scheme-able.  You can invoke it thus:

  prompt bull [<color1> [<color2> [<color3>]]]

where the parameters are the colors for the theme-bar and current
working directory, user@host text, and color3 text respectively.  The
default colors are green, white, and blue.  This theme works best
with a dark background.

Recommended fonts for this theme: NerdFont.
If you don't have any of these, the 8-bit characters will probably look
stupid.
EOH
}

prompt_bull_setup () {
  local -A schars
  autoload -Uz prompt_special_chars
  prompt_special_chars

  local color1=${1:-'green'}
  local color2=${2:-'white'}
  local color3=${3:-'blue'}

  local LVL=$SHLVL
  # Check for tmux by looking at $TERM, because $TMUX won't be propagated to any
  # nested sudo shells but $TERM will.
  local TMUXING=$([[ "$TERM" =~ "tmux" ]] && echo tmux)
  if [ -n "$TMUXING" -a -n "$TMUX" ]; then
    LVL=$(($LVL - 1))
  fi
  if [ -n "$XAUTHORITY" ]; then
    LVL=$(($LVL - 2))
  fi

  # return code and ❯ (according to shell levels)
  local start="%B%(?.%F{green}.%F{red}%?)%{"$(printf '\u276f%.0s' {1..$LVL})'%'$LVL'G%} %f%b'
  # username and hostname if on an ssh session
  local ssh_info="%B${SSH_TTY:+:}%b$__BULL[ITALIC_ON]%}%F{$color1}${SSH_TTY:+%n@%m}%f%{$__BULL[ITALIC_OFF]%}"
  # current directory with shaded bar
  local dir_bar="%B%F{$color1}%K{$color1}$schars[333]$schars[262]$schars[261]$schars[260]%F{$color2}%K{$color1}%(7~|%-3~/.../%3~|%~)%b%F{$color1}%k$schars[333]$schars[262]$schars[261]$schars[260]%f"

  local nr_jobs="%B%F{$color3}%(1j.%(2j.%j.)*.)%f%b"
  local hist_len="%B%F{$color2}%{ %2G%}%h%f%b"

  # Primary Prompt, printed before a command is read.
  PS1="$dir_bar$ssh_info $hist_len$prompt_newline$MODE_INDICATOR_PROMPT$nr_jobs$start"
  # Secondary Prompt, printed when the shell needs more information to complete
  # a command
  PS2="%F{$color1}%K{$color1}$schars[333]$schars[262]$schars[261]$schars[260]%k%_%f> "

  #
  # Right-Hand side prompt: VcsInfo, Timer
  #
  RPROMPT_BASE="\${vcs_info_msg_0_}"
  RPS1=$RPROMPT_BASE

  #
  # Timer: added as starting element to the right side prompt
  #
  typeset -F SECONDS
  function __record-start-time() {
    ZSH_START_TIME=${ZSH_START_TIME:-$SECONDS}
  }

  function __report-start-time() {
    if [ $ZSH_START_TIME ]; then
      local DELTA=$(($SECONDS - $ZSH_START_TIME))
      local DAYS=$((~~($DELTA / 86400)))
      local HOURS=$((~~(($DELTA - $DAYS * 86400) / 3600)))
      local MINUTES=$((~~(($DELTA - $DAYS * 86400 - $HOURS * 3600) / 60)))
      local SECS=$(($DELTA - $DAYS * 86400 - $HOURS * 3600 - $MINUTES * 60))
      local ELAPSED=''
      test "$DAYS" != '0' && ELAPSED="${DAYS}d"
      test "$HOURS" != '0' && ELAPSED="${ELAPSED}${HOURS}h"
      test "$MINUTES" != '0' && ELAPSED="${ELAPSED}${MINUTES}m"
      if [ "$ELAPSED" = '' ]; then
        SECS="$(print -f "%.2f" $SECS)s"
      elif [ "$DAYS" != '0' ]; then
        SECS=''
      else
        SECS="$((~~$SECS))s"
      fi
      ELAPSED="${ELAPSED}${SECS}"
      RPS1="%F{cyan}%{$__BULL[ITALIC_ON]%}${ELAPSED}%{$__BULL[ITALIC_OFF]%}%f $RPROMPT_BASE"
      unset ZSH_START_TIME
    else
      RPS1="$RPROMPT_BASE"
    fi
  }

  add-zsh-hook preexec __record-start-time
  add-zsh-hook precmd __report-start-time

  # Prompt used for spelling correction.
  SPROMPT="zsh: correct %F{red}'%R'%f to %F{green}'%r'%f [%B%Un%u%bo, %B%Uy%u%bes, %B%Ue%u%bdit, %B%Ua%u%bbort]? "

  prompt_opts=(cr subst percent)
}

prompt_bull_preview () {
  local color colors
  colors=(red yellow green blue magenta)

  if (( ! $#* )); then
    for (( i = 1; i <= $#colors; i++ )); do
      color=$colors[$i]
      prompt_preview_theme bull $color
      print
    done
    prompt_preview_theme bull white grey blue
  else
    prompt_preview_theme bull "$@"
  fi
}

prompt_bull_setup "$@"

# vim:ft=zsh
