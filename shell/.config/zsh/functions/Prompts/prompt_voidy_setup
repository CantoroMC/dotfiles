# Create a hash table for globally stashing variables without polluting main
# scope with a bunch of identifiers.

autoload -Uz async; async

typeset -A __FMT
__FMT[ITALIC_ON]=$'\e[3m'
__FMT[ITALIC_OFF]=$'\e[23m'


prompt_voidy_precmd() {
  local exitstatus=$?
  setopt localoptions noxtrace noksharrays
  psvar=(SIG)
  [[ $exitstatus -gt 128 ]] && psvar[1]=SIG$signals[$exitstatus-127]
  [[ $psvar[1] = SIG ]] && psvar[1]=$exitstatus

  async_job vcs_updater_worker
}

prompt_voidy_help () {
  cat <<EOH
  This prompt is color-scheme-able.  You can invoke it thus:

    prompt voidy [<color1> [<color2> [<color3>]]]

  where the parameters are the colors for the theme-bar and current
  working directory, user@host text, and color3 text respectively.
  The default colors are blue, white, and green.
  This theme works best with a dark background.

  Recommended fonts for this theme: NerdFont.
  If you don't have any of these, the 8-bit characters will probably look
  stupid.
EOH
}

vcs_update() {
  vcs_info
  zle reset-prompt
}

#
# Timer: added as starting element to the right side prompt
#
typeset -F SECONDS
function __record-start-time() {
  ZSH_START_TIME=${ZSH_START_TIME:-$SECONDS}
}

function __report-start-time() {
  if [ $ZSH_START_TIME ]; then
    local DELTA=$(($SECONDS - $ZSH_START_TIME))
    local DAYS=$((~~($DELTA / 60 / 60 / 24)))
    local HOURS=$((~~(($DELTA - $DAYS * 86400) / 3600)))
    local MINUTES=$((~~(($DELTA - $DAYS * 86400 - $HOURS * 3600) / 60)))
    local SECS=$(($DELTA - $DAYS * 86400 - $HOURS * 3600 - $MINUTES * 60))
    local ELAPSED=''
    test "$DAYS" != '0' && ELAPSED="${DAYS}d"
    test "$HOURS" != '0' && ELAPSED="${ELAPSED}${HOURS}h"
    test "$MINUTES" != '0' && ELAPSED="${ELAPSED}${MINUTES}m"
    if [ "$ELAPSED" = '' ]; then
      SECS="$(print -f "%.2f" $SECS) s"
    elif [ "$DAYS" != '0' ]; then
      SECS=''
    else
      SECS="$((~~$SECS)) s"
    fi
    ELAPSED="${ELAPSED}${SECS}"
    if [ $ELAPSED = '0,00 s' ]; then
      PS1="$LEFT_PS1$RIGHT_PS1"
    else
      PS1=" $PROMPT_BASE"
      PS1="$LEFT_PS1%F{cyan}%{$__FMT[ITALIC_ON]%}${ELAPSED}%{$__FMT[ITALIC_OFF]%}%f $RIGHT_PS1"
    fi
    unset ZSH_START_TIME
  else
    PS1="$LEFT_PS1$RIGHT_PS1"
  fi
}

prompt_voidy_setup () {
  local color1=${1:-'green'}
  local color2=${2:-'white'}
  local color3=${3:-'blue'}

  local LVL=$SHLVL
  # Check for tmux by looking at $TERM, because $TMUX won't be propagated to any
  # nested sudo shells but $TERM will.
  local TMUXING=$([[ "$TERM" =~ "tmux" ]] && echo tmux)
  if [ -n "$TMUXING" -a -n "$TMUX" ]; then
    LVL=$(($LVL - 1))
  fi
  if [ -n "$XAUTHORITY" ]; then
    LVL=$(($LVL - 2))
  fi
  if [ -n "$VIMRUNTIME" ]; then
    LVL=$(($LVL - 1))
  fi

  local who=" %F{$color1}╭─ %n%f at %F{$color1}%m%f"
  local dir="in %F{$color3}%(7~|%-3~/.../%3~|%~)%f"
  local hist="%B%F{$color2}    %h%f%b"
  local curvim="%F{$color1}╰─%f $MODE_INDICATOR_PROMPT"
  local arrow="%B%(?.%F{$color1}.%F{red}%v)%{"$(printf '❯%.0s' {1..$LVL})'%'$LVL'G%}%f%b'
  local nr_jobs="%B%F{$color3}%(1j.%(2j.%j.)*.)%f%b"

  #
  # Primary Prompt, printed before a command is read.
  #
  LEFT_PS1="$who $dir $hist$prompt_newline $curvim "
  RIGHT_PS1="$arrow$nr_jobs "
  add-zsh-hook preexec __record-start-time
  add-zsh-hook precmd  __report-start-time

  #
  # Secondary Prompt
  #
  PS2="%F{$color1}%_%f> "

  #
  # Right-Hand side prompt: VcsInfo, Timer
  #
  async_start_worker vcs_updater_worker
  async_register_callback vcs_updater_worker vcs_update
  RPS1="\${vcs_info_msg_0_}"

  #
  # Closure
  #
  prompt_opts=(cr subst percent)
  add-zsh-hook precmd prompt_voidy_precmd
}

prompt_voidy_preview () {
  local color colors
  colors=(red yellow green blue magenta)

  if (( ! $#* )); then
    for (( i = 1; i <= $#colors; i++ )); do
      color=$colors[$i]
      prompt_preview_theme voidy $color
      print
    done
    prompt_preview_theme voidy green white blue
  else
    prompt_preview_theme voidy "$@"
  fi
}

prompt_voidy_setup "$@"

# vim:ft=zsh
